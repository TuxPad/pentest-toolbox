import argparse
import requests
import sys
from tqdm import tqdm
from tabulate import tabulate

# Arguments
parser = argparse.ArgumentParser()
parser.add_argument("-f", "--file", required=True, help="File of payloads to be used")
parser.add_argument("-H", "--header", help="Add custom header")
parser.add_argument("-o", "--output", help="Save output to file")
parser.add_argument("-u", "--URL",required=True, help="https://url.to.site/to/be/fuzzed")
parser.add_argument("-v", "--version", action="version", version="tfuzz version: 0.1", help="Show program's version number and exit.")

args = parser.parse_args()

def read_payloads(input):
    p_list = []
    try:
        with open(input, 'r') as file:
            for line in file:
                p_list.append(line.strip())
    except FileNotFoundError:
        sys.exit("Payload file not found")
    return p_list

def fuzz(p_load, url):
    pbar = tqdm(total=len(p_load))
    print(f"Fuzzing: {url.strip('FUZZ')}")
    result = []
    for i in p_load:
        response = requests.get(url.replace('FUZZ', i))
        result.append((i,response.status_code,response.elapsed.total_seconds()*1000))
        pbar.set_description(i)
        pbar.update(1)
    pbar.close()
    return result

def main():
    payloads = read_payloads(args.file)
    if args.header:
        print(args.header)
    elif args.file:
        print("Payloads: ")
        print(args.file)
    
    output = fuzz(payloads, args.URL)
    print(tabulate(output,headers=["Payload:","Status code:","Response time:"]))

if __name__ == "__main__":
    main()
